// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT. Created at 2023-08-06 02:48:41
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// DailyFeedItemRecordDao is the data access object for table daily_feed_item_record.
type DailyFeedItemRecordDao struct {
	table   string                     // table is the underlying table name of the DAO.
	group   string                     // group is the database configuration group name of current DAO.
	columns DailyFeedItemRecordColumns // columns contains all the column names of Table for convenient usage.
}

// DailyFeedItemRecordColumns defines and stores column names for table daily_feed_item_record.
type DailyFeedItemRecordColumns struct {
	ChannelId string //
	ItemId    string //
	PubDate   string //
}

//  dailyFeedItemRecordColumns holds the columns for table daily_feed_item_record.
var dailyFeedItemRecordColumns = DailyFeedItemRecordColumns{
	ChannelId: "channel_id",
	ItemId:    "item_id",
	PubDate:   "pub_date",
}

// NewDailyFeedItemRecordDao creates and returns a new DAO object for table data access.
func NewDailyFeedItemRecordDao() *DailyFeedItemRecordDao {
	return &DailyFeedItemRecordDao{
		group:   "default",
		table:   "daily_feed_item_record",
		columns: dailyFeedItemRecordColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *DailyFeedItemRecordDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *DailyFeedItemRecordDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *DailyFeedItemRecordDao) Columns() DailyFeedItemRecordColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *DailyFeedItemRecordDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *DailyFeedItemRecordDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *DailyFeedItemRecordDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
