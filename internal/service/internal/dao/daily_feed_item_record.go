// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"context"
	"guoshao-fm-web/internal/consts"
	"guoshao-fm-web/internal/model/entity"
	"guoshao-fm-web/internal/service/internal/dao/internal"
	"time"

	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/os/gtime"
)

// dailyFeedItemRecordDao is the data access object for table daily_feed_item_record.
// You can define custom methods on it to extend its functionality as you wish.
type dailyFeedItemRecordDao struct {
	*internal.DailyFeedItemRecordDao
}

var (
	// DailyFeedItemRecord is globally public accessible object for table daily_feed_item_record operations.
	DailyFeedItemRecord = dailyFeedItemRecordDao{
		internal.NewDailyFeedItemRecordDao(),
	}
)

// Fill with you ideas below.
func CreateDailyFeedItemRecord(ctx context.Context, channelId, itemId, pubDate string) (err error) {
	var (
		queryEntity entity.DailyFeedItemRecord
	)

	queryEntity, err = GetDailyFeedItemRecordByChannelIdAndItemId(ctx, channelId, itemId)
	if queryEntity.ItemId != "" {
		err = gerror.New(consts.DB_DATA_ALREADY_EXIST)
		return
	}

	if channelId == "" || itemId == "" || pubDate == "" {
		err = gerror.New(gcode.CodeMissingParameter.Message())
		return
	}

    pubDateTime, err := time.Parse("2006-01-02", pubDate)
	newEntity := entity.DailyFeedItemRecord{
		ChannelId: channelId,
		ItemId:    itemId,
		PubDate:   gtime.NewFromTime(pubDateTime),
	}

	_, err = DailyFeedItemRecord.Ctx(ctx).Insert(newEntity)

	return
}

func GetDailyFeedItemRecordByChannelIdAndItemId(ctx context.Context, channelId, itemId string) (entity entity.DailyFeedItemRecord, err error) {

	if channelId == "" || itemId == "" {
		err = gerror.New(gcode.CodeMissingParameter.Message())
		return
	}

	err = DailyFeedItemRecord.Ctx(ctx).Where("channel_id=? and item_id=?", channelId, itemId).Scan(&entity)

	return
}
